// retrieve only the text of the categories
var rails_categories = [<%= raw @categories.map(&:text) %>]
// Quick fix: after mapping, all values are clumped into one array index.
var categories = String(rails_categories[0]).split(',')

// Select distinct colors equal to number of graphs.
var numColors = <%= @collaborators.count %>
var colors = []
for (var i = 0; i < numColors; i++) {
    colors[i] = hexToRgb(rainbow(numColors, i))
}

var data = {
    labels: categories,
    datasets: [
        <% idx = 0 %>
        <% for scores in @collaborator_scores %>
            <% if scores["selected"] %>
            {
                // For strings, need to process rails in quotes! Without quotes, returns int.
                label: '<%= scores["label"] %>', 
                fillColor: "rgba(" + colors[<%= idx %>].r + "," 
                    + colors[<%= idx %>].g + ","
                    + colors[<%= idx %>].b + ",0.5)",
                strokeColor: "rgba(220,220,220,1)",
                pointColor: "rgba(" + colors[<%= idx %>].r + "," 
                    + colors[<%= idx %>].g + ","
                    + colors[<%= idx %>].b + ",0.5)",
                pointStrokeColor: "#fff", 
                pointHighlightFill: "#fff",
                pointHighlightStroke: "rgba(220,220,220,1)",
                data: String(<%= scores["score"] %>).split(',')
            },
            <% end %>
        <% idx += 1 %>
        <% end %>
    ]
};

var ctx = $("#myChart").get(0).getContext("2d");
initializeRadar(data,ctx, colors)

/**
 * initialize a Radar chart
 * @param  {hashmap} data
 * @param  {class} ctx
 * @param  {hashmap} options
 * @return {void}
 */
function initializeRadar(data, ctx, colors){
  var myRadarChart = new Chart(ctx).Radar(data, null);
  legend(document.getElementById("legend"), colors)
}


/**
 * Constructs the legend for the radar graph
 * @param  {DOM element} parent
 * @param  {array} data
 * @return {void}
 */
function legend(parent, colors) {
    parent.className = 'legend';

    // remove possible children of the parent
    while(parent.hasChildNodes()) {
        parent.removeChild(parent.lastChild);
    }

    <% idx = 0 %>
    <% for scores in @collaborator_scores %>
        var title = document.createElement('div');
        title.className = 'title';
        parent.appendChild(title);

        var checkbox = document.createElement('input');
        checkbox.type = "checkbox"
        checkbox.style.width = 10 + "px"
        checkbox.style.height = 10 + "px"
        checkbox.style.marginLeft = 5 + "px";
        checkbox.id = <%= scores["collaborator"].id %>
        checkbox.className = "toGraph"
        <% if scores["selected"] %>
        checkbox.checked = true
        <% end %>

        var colorDiv = document.createElement('div')
        colorDiv.style.width = 20 + "px"
        colorDiv.style.height = 20 + "px"
        colorDiv.style.backgroundColor = "rgba(" + colors[<%= idx %>].r + "," 
                    + colors[<%= idx %>].g + ","
                    + colors[<%= idx %>].b + ",0.5)"
        colorDiv.style.display = "inline-block";
        colorDiv.style.marginRight = 10 + "px";
        colorDiv.appendChild(checkbox)
        title.appendChild(colorDiv);

        var text = document.createTextNode('<%= scores["collaborator"].user.email %>');
        title.appendChild(text);
    <% idx += 1 %>
    <% end %>
}

/**
 * Converts Hex to RGB JSON
 * @param  {String} hex
 * @return {JSON}
 */
function hexToRgb(hex) {
    var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    return result ? {
        r: parseInt(result[1], 16),
        g: parseInt(result[2], 16),
        b: parseInt(result[3], 16)
    } : null;
}

/**
 * Generates distinct colors from the spectrum depending on increments.
 * @param  {int} numOfSteps number of colors
 * @param  {int} step index of color in spectrum
 * @return {String} Hex value of color
 */
function rainbow(numOfSteps, step) {
    // This function generates vibrant, "evenly spaced" colours (i.e. no clustering). This is ideal for creating easily distinguishable vibrant markers in Google Maps and other apps.
    // Adam Cole, 2011-Sept-14
    // HSV to RBG adapted from: http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript
    var r, g, b;
    var h = step / numOfSteps;
    var i = ~~(h * 6);
    var f = h * 6 - i;
    var q = 1 - f;
    switch(i % 6){
        case 0: r = 1, g = f, b = 0; break;
        case 1: r = q, g = 1, b = 0; break;
        case 2: r = 0, g = 1, b = f; break;
        case 3: r = 0, g = q, b = 1; break;
        case 4: r = f, g = 0, b = 1; break;
        case 5: r = 1, g = 0, b = q; break;
    }
    var c = "#" + ("00" + (~ ~(r * 255)).toString(16)).slice(-2) + ("00" + (~ ~(g * 255)).toString(16)).slice(-2) + ("00" + (~ ~(b * 255)).toString(16)).slice(-2);
    return (c);
}